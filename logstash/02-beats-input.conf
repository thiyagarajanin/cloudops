input {
  beats {
    port => 5044
    client_inactivity_timeout => 86400
    ssl => true
    ssl_certificate => "/opt/workspace/logstash/logstash-forwarder.crt"
    ssl_key => "/opt/workspace/logstash/logstash-forwarder.key"
  }
  file {
    path => "/usr/local/apache-8080/logs/catalina.out"
    type => "ant-at-log"
    start_position => "beginning"
  }
}

filter {
        if [type] == "nginx_access" {
		grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA:filename}\.log" }
        	}
		grok {
                match => { "host" => "%{GREEDYDATA:hostname}\.eu-west-1.compute.internal" }
                }
		useragent {
		source => "agent"
		}
                grok {
                patterns_dir => ["/opt/logstash/patterns"]
                match => { "message" => "%{NGINXACCESS}" }
                }
        }
        else if [type] == "nginx_error" {
                grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA:filename}\.log" }
        	}
		grok {
                patterns_dir => ["/opt/logstash/patterns"]
                match => { "message" => "%{NGINXERROR}" }
                }
        }
	else if [type] == "anttail-gwprocessor-logs" and "Invalid measure time for gateway" in [message]{
                grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA}/%{GREEDYDATA:filename}/%{GREEDYDATA}/%{GREEDYDATA}"}
                }
                grok {
                patterns_dir => ["/opt/logstash/patterns"]
                match => { "message" => "%{ANTTAILINVALID}" }
                }
                date {
                 match => ["time", "yyyy-MM-dd-HH-mm-ss-SSS"]
                 target => "@timestamp"
                }
        }
        else if [type] == "anttail-gwprocessor-logs" and "Received a message from" in [message]{
                grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA}/%{GREEDYDATA:filename}/%{GREEDYDATA}/%{GREEDYDATA}"}
                }
                grok {
                match => { "message" => "%{LOGLEVEL:loglevel}\: Received a message from %{GREEDYDATA:Cause}\ %{GREEDYDATA:Client}\,%{GREEDYDATA}\:%{GREEDYDATA:gateway_node_Id}" }
                }
                date {
                 match => ["time", "yyyy-MM-dd-HH-mm-ss-SSS"]
                 target => "@timestamp"
                }
        }
	else if [type] == "tomcat" or "anttail" in [type]{
                grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA}/%{GREEDYDATA:filename}/%{GREEDYDATA}/%{GREEDYDATA}"}
                }
		grok {
                match => { "host" => "%{GREEDYDATA:hostname}\.eu-west-1.compute.internal" }
                }
                multiline {
                pattern => "(^[a-zA-Z.]+(?:Error|Exception).+)|(^\s+at .+)|(^\s+... \d+ more)|(^\t+)|(^\s*Caused by:.+)"
                what => "previous"
                }
                date {
                 match => ["time", "yyyy-MM-dd-HH-mm-ss-SSS"]
                 target => "@timestamp"
                }
        }
	else if [type] == "ant-uploader-logs"{
                grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA:filename}\.txt"}
                }
                grok {
                match => { "host" => "%{GREEDYDATA:hostname}\.eu-west-1.compute.internal" }
                }
                multiline {
                pattern => "(^[a-zA-Z.]+(?:Error|Exception).+)|(^\s+at .+)|(^\s+... \d+ more)|(^\t+)|(^\s*Caused by:.+)"
                what => "previous"
                }
                date {
                 match => ["time", "yyyy-MM-dd-HH-mm-ss-SSS"]
                 target => "@timestamp"
                }
        }
	else if [type] == "ant-at-log" and "Invalid measure time for gateway" in [message]{
                grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA:filename}\.out"}
                }
    		grok {
		patterns_dir => ["/opt/logstash/patterns"]
                match => { "message" => "%{ANTTAILINVALID}" }
        	}
                date {
                 match => ["time", "yyyy-MM-dd-HH-mm-ss-SSS"]
                 target => "@timestamp"
                }
        }
	else if [type] == "ant-at-log" and "Received a message from" in [message]{
                grok {
                match => { "source" => "%{GREEDYDATA}/%{GREEDYDATA:filename}\.out"}
                }
                grok {
                match => { "message" => "%{LOGLEVEL:loglevel}\: Received a message from %{GREEDYDATA:Cause}\ %{GREEDYDATA:Client}\,%{GREEDYDATA}\:%{GREEDYDATA:gateway_node_Id}" }
                }
                date {
                 match => ["time", "yyyy-MM-dd-HH-mm-ss-SSS"]
                 target => "@timestamp"
                }
        }
	
}
