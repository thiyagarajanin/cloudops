input {
 elasticsearch {
	hosts => "localhost"
    index => "anttail-gwprocessor-logs*"
    query => '{ 
	"query": {
		"bool": {
		  "must": [
			{
			  "query_string": {
				"query": "\"Invalid measure time for gateway node Id\"",
				"analyze_wildcard": true
			  }
			},
			{
			  "range": {
				"@timestamp": {
				  "gte": "now-1d/d",
				  "lte": "now/d",
				  "format": "epoch_millis"
				}
			  }
			}
		  ],
		  "must_not": []
		}
		}
	}'
  }
}
filter {
	if "Invalid measure time for gateway" in [message]{
	aggregate {
    		task_id => "%{gateway_node_Id}"
                code => "
			map['message'] ||= event.get('message')
                        map['gateway_name'] ||= event.get('gateway_name')
                        map['gateway_node_Id'] ||= event.get('gateway_node_Id')
                        map['Received_time'] ||= event.get('Received_time')
                        map['Actual_measure_time'] ||= event.get('Actual_measure_time')
                "
		push_previous_map_as_event => false
		push_map_as_event_on_timeout => true
		timeout => 5
		timeout_task_id_field => "gateway_node_Id"
		timeout_tags => ["aggregate"]
	}
	if "aggregate" not in [tags] {
                drop{}
        }
	ruby {
        init => "
            begin
                    @@csv_file    = 'Sensors_with_invalid_measured_time.csv'
                    @@csv_headers = ['Sensor ID','Sensor Name','Received Time in UTC (Sample)','Actual measure time in UTC (Sample)']
		    if File.zero?(@@csv_file) || !File.exist?(@@csv_file)
                    CSV.open(@@csv_file, 'w') do |csv|
                        csv << @@csv_headers
                    end
                end
            end
        "
	code => ""
        }
	}	
}
output {
	if "aggregate" in [tags] {
        csv {
        	path => "Sensors_with_invalid_measured_time.csv"
                fields => ["gateway_node_Id","gateway_name","Received_time","Actual_measure_time"]
		flush_interval => 0
	}
	}
}
